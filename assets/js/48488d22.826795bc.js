"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[163],{354:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Tools/routing-tool","title":"LangSwarmRoutingTool","description":"---","source":"@site/docs/Tools/routing-tool.md","sourceDirName":"Tools","slug":"/Tools/routing-tool","permalink":"/LangSwarm/Tools/routing-tool","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":93,"frontMatter":{"title":"LangSwarmRoutingTool","sidebar_position":93},"sidebar":"defaultSidebar","previous":{"title":"LangSwarmConsensusTool","permalink":"/LangSwarm/Tools/consensus-tool"},"next":{"title":"LangSwarmVotingTool","permalink":"/LangSwarm/Tools/voting-tool"}}');var i=s(4848),t=s(8453);const r={title:"LangSwarmRoutingTool",sidebar_position:93},l="Documentation for LangSwarmRoutingTool Class",a={},c=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Purpose</strong>",id:"purpose",level:2},{value:"<strong>Class Definition</strong>",id:"class-definition",level:2},{value:"<strong>Key Components</strong>",id:"key-components",level:2},{value:"<strong>Usage</strong>",id:"usage",level:2},{value:"<strong>Customization</strong>",id:"customization",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2},{value:"<strong>Comparison with Other Tools</strong>",id:"comparison-with-other-tools",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsxs)(e.h1,{id:"documentation-for-langswarmroutingtool-class",children:["Documentation for ",(0,i.jsx)(e.code,{children:"LangSwarmRoutingTool"})," Class"]})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"overview",children:(0,i.jsx)(e.strong,{children:"Overview"})}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"LangSwarmRoutingTool"})," is a LangChain-compatible tool designed to dynamically route tasks to the most appropriate agents or workflows based on predefined routing logic. By leveraging the ",(0,i.jsx)(e.code,{children:"LLMRouting"})," class, it enables efficient task delegation, ensuring that queries are processed by the best-suited agent or workflow."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"purpose",children:(0,i.jsx)(e.strong,{children:"Purpose"})}),"\n",(0,i.jsxs)(e.p,{children:["The primary purpose of the ",(0,i.jsx)(e.code,{children:"LangSwarmRoutingTool"})," is:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Dynamic Task Routing"}),": To intelligently route tasks to the appropriate agents or workflows based on routing logic."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Pipeline Integration"}),": To serve as a dynamic routing tool within LangChain workflows, enabling modular and efficient task delegation."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Customizability"}),": To allow developers to define and customize routing logic for diverse use cases."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"class-definition",children:(0,i.jsx)(e.strong,{children:"Class Definition"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class LangSwarmRoutingTool(Tool):\n    def __init__(self, route, bots, main_bot, **kwargs):\n        """\n        Initializes the LangSwarmRoutingTool.\n\n        Parameters:\n        - route (int): The routing logic to apply.\n        - bots (dict): Dictionary of bots to route tasks.\n        - main_bot: The primary bot for routing decisions.\n        - kwargs: Additional parameters for the LLMRouting class.\n        """\n        self.routing = LLMRouting(route=route, bots=bots, main_bot=main_bot, **kwargs)\n        super().__init__(\n            name="LangSwarm Routing",\n            func=self.run,\n            description="A tool to dynamically route tasks to the appropriate agents."\n        )\n\n    def run(self, query):\n        """\n        Executes the routing workflow with the given query.\n\n        Parameters:\n        - query (str): The query to process.\n\n        Returns:\n        - str: The result from the routed agent.\n        """\n        self.routing.query = query\n        return self.routing.run()\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"key-components",children:(0,i.jsx)(e.strong,{children:"Key Components"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:"__init__"})," Method"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Initializes the tool with routing logic, a dictionary of bots, and a primary bot for decision-making."}),"\n",(0,i.jsxs)(e.li,{children:["Parameters:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"route"}),": Integer defining the routing logic to apply."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"bots"}),": A dictionary mapping bot identifiers to their respective instances."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"main_bot"}),": The primary bot responsible for making routing decisions."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"kwargs"}),": Optional parameters passed to configure the ",(0,i.jsx)(e.code,{children:"LLMRouting"})," class."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Inherits from the ",(0,i.jsx)(e.code,{children:"Tool"})," class, defining the tool's name and description."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:"run"})," Method"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Executes the routing workflow."}),"\n",(0,i.jsxs)(e.li,{children:["Parameters:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"query"}),": The query string to be processed."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Workflow:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Assigns the query to the ",(0,i.jsx)(e.code,{children:"LLMRouting"})," instance."]}),"\n",(0,i.jsxs)(e.li,{children:["Calls the ",(0,i.jsx)(e.code,{children:"run"})," method of ",(0,i.jsx)(e.code,{children:"LLMRouting"})," to route the query to the appropriate agent or workflow."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"Returns the result from the routed agent."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"usage",children:(0,i.jsx)(e.strong,{children:"Usage"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Initialization"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from langswarm.swarm.routing import LLMRouting\nfrom mymodule import LangSwarmRoutingTool\n\n# Define bots and routing logic\nbots = {\n    "bot1": agent1,\n    "bot2": agent2,\n    "bot3": agent3,\n}\nmain_bot = central_decision_maker\n\n# Initialize the LangSwarmRoutingTool\ntool = LangSwarmRoutingTool(route=1, bots=bots, main_bot=main_bot, param1=value1)\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Execution"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Input query\nquery = "What is the best approach for starting a small business?"\n\n# Get the result from the routed agent\nresult = tool.run(query)\nprint("Routed Result:", result)\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Integration with LangChain Workflows"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["The ",(0,i.jsx)(e.code,{children:"LangSwarmRoutingTool"})," can be directly used as a tool in LangChain workflows."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from langchain.agents import initialize_agent\n\ntools = [tool]\nagent = initialize_agent(tools, llm, agent="zero-shot-react-description")\n\n# Run the agent with the tool\nresult = agent.run("How do I calculate the ROI for my startup?")\nprint(result)\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"customization",children:(0,i.jsx)(e.strong,{children:"Customization"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Custom Routing Logic"}),": Modify the ",(0,i.jsx)(e.code,{children:"route"})," parameter or extend the ",(0,i.jsx)(e.code,{children:"LLMRouting"})," class to define more advanced routing strategies."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Dynamic Bots"}),": The ",(0,i.jsx)(e.code,{children:"bots"})," dictionary can be updated dynamically to add or remove agents based on task requirements."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Extending the Tool"}),": Subclass ",(0,i.jsx)(e.code,{children:"LangSwarmRoutingTool"})," to add pre- or post-processing logic for the routed tasks."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"use-cases",children:(0,i.jsx)(e.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Domain-Specific Task Assignment"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Route queries to agents specialized in different domains (e.g., legal, technical, or financial queries)."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Workflow Optimization"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Delegate tasks to agents or workflows based on efficiency, capacity, or expertise."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Context-Aware Routing"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Use the ",(0,i.jsx)(e.code,{children:"main_bot"})," to analyze the query context and make intelligent routing decisions."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Load Balancing"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Distribute tasks across multiple agents to balance workloads and prevent bottlenecks."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"comparison-with-other-tools",children:(0,i.jsx)(e.strong,{children:"Comparison with Other Tools"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LangSwarmRoutingTool"}),": Dynamically routes tasks to specific agents or workflows based on routing logic."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LangSwarmConsensusTool"}),": Aggregates responses from multiple agents to produce a consensus-driven result."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LangSwarmBranchingTool"}),": Generates diverse responses from multiple agents without routing tasks."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LangSwarmAggregationTool"}),": Merges responses into a unified result without requiring routing."]}),"\n"]})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>l});var o=s(6540);const i={},t=o.createContext(i);function r(n){const e=o.useContext(t);return o.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:r(n.components),o.createElement(t.Provider,{value:e},n.children)}}}]);