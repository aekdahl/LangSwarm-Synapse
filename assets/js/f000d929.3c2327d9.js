"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[507],{4866:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Features/agent-factory","title":"AgentFactory","description":"Overview","source":"@site/docs/Features/agent-factory.md","sourceDirName":"Features","slug":"/Features/agent-factory","permalink":"/LangSwarm/Features/agent-factory","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":60,"frontMatter":{"title":"AgentFactory","sidebar_position":60},"sidebar":"defaultSidebar","previous":{"title":"VotingChain","permalink":"/LangSwarm/Chains/voting-chain"},"next":{"title":"LLMAggregation","permalink":"/LangSwarm/Features/llm-aggregation"}}');var s=t(4848),a=t(8453);const i={title:"AgentFactory",sidebar_position:60},l="AgentFactory",o={},c=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Key Features</strong>",id:"key-features",level:2},{value:"<strong>API Reference</strong>",id:"api-reference",level:2},{value:"<strong><code>AgentFactory.create_agent</code></strong>",id:"agentfactorycreate_agent",level:3},{value:"<strong>Parameters</strong>",id:"parameters",level:4},{value:"<strong>Returns</strong>",id:"returns",level:4},{value:"<strong>Example Usage</strong>",id:"example-usage",level:4},{value:"<strong><code>AgentFactory.wrap_agent</code></strong>",id:"agentfactorywrap_agent",level:3},{value:"<strong>Parameters</strong>",id:"parameters-1",level:4},{value:"<strong>Returns</strong>",id:"returns-1",level:4},{value:"<strong>Example Usage</strong>",id:"example-usage-1",level:4},{value:"<strong>Full Example</strong>",id:"full-example",level:2},{value:"<strong>Creating Multiple Agents with AgentFactory</strong>",id:"creating-multiple-agents-with-agentfactory",level:3},{value:"<strong>Best Practices</strong>",id:"best-practices",level:2},{value:"<strong>Key Advantages</strong>",id:"key-advantages",level:2},{value:"<strong>Future Enhancements</strong>",id:"future-enhancements",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"agentfactory",children:"AgentFactory"})}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:(0,s.jsx)(n.strong,{children:"Overview"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"AgentFactory"})," in LangSwarm simplifies the creation of agents for use in LangSwarm workflows. It provides a unified interface for building agents from popular platforms like LangChain, Hugging Face, OpenAI, and custom implementations. By abstracting the agent creation process, the ",(0,s.jsx)(n.code,{children:"AgentFactory"})," enables developers to focus on orchestrating multi-agent workflows without worrying about agent compatibility."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"key-features",children:(0,s.jsx)(n.strong,{children:"Key Features"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Unified Interface"}),": Supports agent creation from multiple platforms (LangChain, Hugging Face, OpenAI, etc.)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Custom Agent Support"}),": Allows integration of custom models or agents using LangSwarm\u2019s wrapper classes."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Flexibility"}),": Automatically adapts agents to LangSwarm workflows, such as voting, consensus, and aggregation."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dynamic Wrapping"}),": Wraps agents with required features like memory or conversational context, ensuring compatibility with LangSwarm tools."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"api-reference",children:(0,s.jsx)(n.strong,{children:"API Reference"})}),"\n",(0,s.jsx)(n.h3,{id:"agentfactorycreate_agent",children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AgentFactory.create_agent"})})}),"\n",(0,s.jsx)(n.p,{children:"Creates an agent based on the provided configuration."}),"\n",(0,s.jsx)(n.h4,{id:"parameters",children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"agent_type"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"str"})}),(0,s.jsxs)(n.td,{children:["The type of agent to create (",(0,s.jsx)(n.code,{children:'"langchain"'}),", ",(0,s.jsx)(n.code,{children:'"huggingface"'}),", ",(0,s.jsx)(n.code,{children:'"openai"'}),", etc.)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"model"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"str"})}),(0,s.jsxs)(n.td,{children:["The model identifier (e.g., ",(0,s.jsx)(n.code,{children:'"gpt-4"'}),", ",(0,s.jsx)(n.code,{children:'"distilbert-base-uncased"'}),", etc.)."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"api_key"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"str"})}),(0,s.jsx)(n.td,{children:"(Optional) API key for platforms like OpenAI or Google Gemini."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"is_conversational"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"bool"})}),(0,s.jsx)(n.td,{children:"Indicates whether the agent supports conversational context."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"kwargs"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"dict"})}),(0,s.jsx)(n.td,{children:"Additional parameters passed to the agent during initialization."})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"returns",children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["An instance of the created agent wrapped with ",(0,s.jsx)(n.code,{children:"AgentWrapper"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-usage",children:(0,s.jsx)(n.strong,{children:"Example Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langswarm.factory import AgentFactory\n\n# Create a LangChain agent\nlangchain_agent = AgentFactory.create_agent(\n    agent_type="langchain",\n    model="gpt-4",\n    api_key="your_openai_api_key",\n    is_conversational=True\n)\n\n# Create a Hugging Face agent\nhuggingface_agent = AgentFactory.create_agent(\n    agent_type="huggingface",\n    model="distilbert-base-uncased",\n    is_conversational=False\n)\n\n# Create an OpenAI agent\nopenai_agent = AgentFactory.create_agent(\n    agent_type="openai",\n    model="gpt-3.5-turbo",\n    api_key="your_openai_api_key",\n    is_conversational=True\n)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h3,{id:"agentfactorywrap_agent",children:(0,s.jsx)(n.strong,{children:(0,s.jsx)(n.code,{children:"AgentFactory.wrap_agent"})})}),"\n",(0,s.jsx)(n.p,{children:"Wraps an existing agent with additional LangSwarm functionality."}),"\n",(0,s.jsx)(n.h4,{id:"parameters-1",children:(0,s.jsx)(n.strong,{children:"Parameters"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"Parameter"}),(0,s.jsx)(n.th,{children:"Type"}),(0,s.jsx)(n.th,{children:"Description"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"agent"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"object"})}),(0,s.jsx)(n.td,{children:"The agent to be wrapped."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"is_conversational"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"bool"})}),(0,s.jsx)(n.td,{children:"Indicates whether the agent supports conversational context."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"kwargs"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"dict"})}),(0,s.jsx)(n.td,{children:"Additional parameters for the wrapper."})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"returns-1",children:(0,s.jsx)(n.strong,{children:"Returns"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"An instance of the wrapped agent."}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"example-usage-1",children:(0,s.jsx)(n.strong,{children:"Example Usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langswarm.factory import AgentFactory\nfrom langchain.llms import OpenAI\n\n# Create a LangChain agent\nlangchain_native_agent = OpenAI(model="gpt-4", temperature=0)\n\n# Wrap the agent for LangSwarm compatibility\nwrapped_agent = AgentFactory.wrap_agent(\n    agent=langchain_native_agent,\n    is_conversational=True\n)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"full-example",children:(0,s.jsx)(n.strong,{children:"Full Example"})}),"\n",(0,s.jsx)(n.h3,{id:"creating-multiple-agents-with-agentfactory",children:(0,s.jsx)(n.strong,{children:"Creating Multiple Agents with AgentFactory"})}),"\n",(0,s.jsxs)(n.p,{children:["The following example demonstrates how to create multiple agents using the ",(0,s.jsx)(n.code,{children:"AgentFactory"})," and use them in a LangSwarm ",(0,s.jsx)(n.code,{children:"LLMConsensus"})," workflow."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from langswarm.factory import AgentFactory\nfrom langswarm.swarm import LLMConsensus\n\n# Step 1: Create agents\nlangchain_agent = AgentFactory.create_agent(\n    agent_type="langchain",\n    model="gpt-4",\n    api_key="your_openai_api_key",\n    is_conversational=True\n)\n\nhuggingface_agent = AgentFactory.create_agent(\n    agent_type="huggingface",\n    model="distilbert-base-uncased",\n    is_conversational=False\n)\n\nopenai_agent = AgentFactory.create_agent(\n    agent_type="openai",\n    model="gpt-3.5-turbo",\n    api_key="your_openai_api_key",\n    is_conversational=True\n)\n\n# Step 2: Use the agents in a LangSwarm workflow\nquery = "What are the benefits of AI in healthcare?"\nconsensus_swarm = LLMConsensus(query=query, clients=[langchain_agent, huggingface_agent, openai_agent])\n\n# Step 3: Run the consensus workflow\nresponse = consensus_swarm.run()\nprint("Consensus Response:", response)\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:(0,s.jsx)(n.strong,{children:"Best Practices"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsxs)(n.strong,{children:["Use ",(0,s.jsx)(n.code,{children:"AgentFactory"})," for Consistency"]}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Always create agents through ",(0,s.jsx)(n.code,{children:"AgentFactory"})," to ensure they are properly wrapped and compatible with LangSwarm workflows."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Specify Conversational Context"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Set ",(0,s.jsx)(n.code,{children:"is_conversational=True"})," for agents that support memory or context, such as LangChain agents with memory."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Custom Agent Wrapping"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["For unsupported agents, use ",(0,s.jsx)(n.code,{children:"AgentFactory.wrap_agent"})," to extend functionality and make them LangSwarm-compatible."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"key-advantages",children:(0,s.jsx)(n.strong,{children:"Key Advantages"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Streamlined Agent Creation"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"One unified interface to manage agents from various platforms."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Seamless Integration"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Agents created by ",(0,s.jsx)(n.code,{children:"AgentFactory"})," work seamlessly across LangSwarm features like voting, aggregation, and routing."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Customizable"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add custom configurations to agents without worrying about compatibility issues."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"future-enhancements",children:(0,s.jsx)(n.strong,{children:"Future Enhancements"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Extend Support"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add support for additional platforms like Google Gemini or proprietary APIs."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Predefined Templates"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Include common agent configurations for popular use cases."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Agent Validation"}),":"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Add checks to validate agent functionality (e.g., conversational or non-conversational behavior)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.strong,{children:"AgentFactory"})," is your go-to solution for simplifying multi-agent workflows in LangSwarm. By abstracting agent creation and compatibility, it ensures a hassle-free experience when working with diverse agents in your AI pipelines."]})]})}function g(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const s={},a=r.createContext(s);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);