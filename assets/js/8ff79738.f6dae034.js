"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[677],{7984:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Tools/branching-tool","title":"LangSwarmBranchingTool","description":"---","source":"@site/docs/Tools/branching-tool.md","sourceDirName":"Tools","slug":"/Tools/branching-tool","permalink":"/LangSwarm/Tools/branching-tool","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":91,"frontMatter":{"title":"LangSwarmBranchingTool","sidebar_position":91},"sidebar":"defaultSidebar","previous":{"title":"LangSwarmAggregationTool","permalink":"/LangSwarm/Tools/aggregation-tool"},"next":{"title":"LangSwarmConsensusTool","permalink":"/LangSwarm/Tools/consensus-tool"}}');var i=s(4848),o=s(8453);const t={title:"LangSwarmBranchingTool",sidebar_position:91},l="LangSwarmBranchingTool",a={},c=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Purpose</strong>",id:"purpose",level:2},{value:"<strong>Class Definition</strong>",id:"class-definition",level:2},{value:"<strong>Key Components</strong>",id:"key-components",level:2},{value:"<strong>Usage</strong>",id:"usage",level:2},{value:"<strong>Customization</strong>",id:"customization",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2},{value:"<strong>Comparison with Other Tools</strong>",id:"comparison-with-other-tools",level:2}];function h(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"langswarmbranchingtool",children:"LangSwarmBranchingTool"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"overview",children:(0,i.jsx)(e.strong,{children:"Overview"})}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"LangSwarmBranchingTool"})," is a LangChain-compatible tool designed to generate multiple responses from a set of Large Language Model (LLM) agents. By leveraging the ",(0,i.jsx)(e.code,{children:"LLMBranching"})," class, this tool enables workflows that require exploration of diverse outputs from multiple agents for a given query."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"purpose",children:(0,i.jsx)(e.strong,{children:"Purpose"})}),"\n",(0,i.jsxs)(e.p,{children:["The primary purpose of the ",(0,i.jsx)(e.code,{children:"LangSwarmBranchingTool"})," is:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Diverse Output Generation"}),": To collect and present multiple responses from different agents for a single query."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Pipeline Integration"}),": To provide a modular tool within LangChain workflows, enabling smooth integration with other tools or agents."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Flexibility"}),": To allow configuration of the branching process through additional parameters."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"class-definition",children:(0,i.jsx)(e.strong,{children:"Class Definition"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class LangSwarmBranchingTool(Tool):\n    def __init__(self, agents, **kwargs):\n        """\n        Initializes the LangSwarmBranchingTool.\n\n        Parameters:\n        - agents (list): List of agents to use in the branching process.\n        - kwargs: Additional parameters for the LLMBranching class.\n        """\n        self.branching = LLMBranching(clients=agents, **kwargs)\n        super().__init__(\n            name="LangSwarm Branching",\n            func=self.run,\n            description="A tool to generate multiple responses from a set of agents."\n        )\n\n    def run(self, query):\n        """\n        Executes the branching workflow with the given query.\n\n        Parameters:\n        - query (str): The query to process.\n\n        Returns:\n        - list: A list of responses from the agents.\n        """\n        self.branching.query = query\n        return self.branching.run()\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"key-components",children:(0,i.jsx)(e.strong,{children:"Key Components"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:"__init__"})," Method"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Initializes the tool with a list of agents and additional parameters."}),"\n",(0,i.jsxs)(e.li,{children:["Creates an instance of the ",(0,i.jsx)(e.code,{children:"LLMBranching"})," class to manage the branching process."]}),"\n",(0,i.jsxs)(e.li,{children:["Parameters:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"agents"}),": A list of LLM agents contributing to the branching process."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"kwargs"}),": Optional parameters passed to configure the ",(0,i.jsx)(e.code,{children:"LLMBranching"})," class."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Inherits from the ",(0,i.jsx)(e.code,{children:"Tool"})," class, defining the tool's name and description."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:"run"})," Method"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Executes the branching workflow."}),"\n",(0,i.jsxs)(e.li,{children:["Parameters:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"query"}),": The query string to be processed."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Workflow:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Assigns the query to the ",(0,i.jsx)(e.code,{children:"LLMBranching"})," instance."]}),"\n",(0,i.jsxs)(e.li,{children:["Calls the ",(0,i.jsx)(e.code,{children:"run"})," method of ",(0,i.jsx)(e.code,{children:"LLMBranching"})," to generate diverse responses."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"Returns a list of responses from the agents."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"usage",children:(0,i.jsx)(e.strong,{children:"Usage"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Initialization"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from langswarm.swarm.branching import LLMBranching\nfrom mymodule import LangSwarmBranchingTool\n\n# Example list of agents (LLM clients)\nagents = [agent1, agent2, agent3]\n\n# Initialize the LangSwarmBranchingTool\ntool = LangSwarmBranchingTool(agents=agents, param1=value1, param2=value2)\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Execution"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Input query\nquery = "Provide different approaches to improve work-life balance."\n\n# Get the list of responses\nresponses = tool.run(query)\nprint("Responses:", responses)\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Integration with LangChain Workflows"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["The ",(0,i.jsx)(e.code,{children:"LangSwarmBranchingTool"})," can be directly used as a tool in LangChain workflows."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from langchain.agents import initialize_agent\n\ntools = [tool]\nagent = initialize_agent(tools, llm, agent="zero-shot-react-description")\n\n# Run the agent with the tool\nresult = agent.run("Suggest creative solutions for reducing traffic congestion.")\nprint(result)\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"customization",children:(0,i.jsx)(e.strong,{children:"Customization"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Adding Custom Parameters"}),": Additional parameters can be passed to ",(0,i.jsx)(e.code,{children:"LLMBranching"})," during initialization to customize the branching logic."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Extending the Tool"}),": Subclass ",(0,i.jsx)(e.code,{children:"LangSwarmBranchingTool"})," to introduce additional functionality, such as filtering or post-processing of responses."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"use-cases",children:(0,i.jsx)(e.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Creative Ideation"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Generate multiple creative solutions or ideas for brainstorming."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Exploring Diverse Perspectives"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Obtain varied viewpoints or interpretations for open-ended questions."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Scenario Analysis"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Generate different hypothetical scenarios or approaches to a given problem."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"comparison-with-other-tools",children:(0,i.jsx)(e.strong,{children:"Comparison with Other Tools"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LangSwarmBranchingTool"}),": Focuses on generating multiple diverse responses without merging or synthesizing them."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LangSwarmAggregationTool"}),": Merges and synthesizes responses into a single unified result."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LangSwarmVotingTool"}),": Selects the most popular or supported response among multiple agents."]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>l});var r=s(6540);const i={},o=r.createContext(i);function t(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);