"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[753],{2630:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"llm-branching","title":"Diverse Output Generation","description":"Overview","source":"@site/docs/llm-branching.md","sourceDirName":".","slug":"/llm-branching","permalink":"/LangSwarm/llm-branching","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Diverse Output Generation","sidebar_position":2},"sidebar":"defaultSidebar","previous":{"title":"Multi-Agent Aggregation","permalink":"/LangSwarm/llm-aggregation"},"next":{"title":"Collaborative Decision-Making","permalink":"/LangSwarm/llm-consensus"}}');var i=s(4848),t=s(8453);const l={title:"Diverse Output Generation",sidebar_position:2},a="Diverse Output Generation",o={},c=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Key Features</strong>",id:"key-features",level:2},{value:"<strong>API Reference</strong>",id:"api-reference",level:2},{value:"<strong>Class: <code>LLMBranching</code></strong>",id:"class-llmbranching",level:3},{value:"<strong>Initialization</strong>",id:"initialization",level:4},{value:"<strong>Methods</strong>",id:"methods",level:3},{value:"<strong><code>run()</code></strong>",id:"run",level:4},{value:"<strong>Examples</strong>",id:"examples",level:2},{value:"<strong>Basic Example</strong>",id:"basic-example",level:3},{value:"<strong>Advanced Example: Combining Branching with Analysis</strong>",id:"advanced-example-combining-branching-with-analysis",level:3},{value:"<strong>How It Works</strong>",id:"how-it-works",level:2},{value:"<strong>Best Practices</strong>",id:"best-practices",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2},{value:"<strong>Key Advantages</strong>",id:"key-advantages",level:2},{value:"<strong>Future Enhancements</strong>",id:"future-enhancements",level:2}];function d(e){const n={br:"br",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"diverse-output-generation",children:"Diverse Output Generation"})}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:(0,i.jsx)(n.strong,{children:"Overview"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"LLMBranching"})," class in LangSwarm enables multi-agent workflows by generating diverse outputs from multiple agents. It is ideal for scenarios where varied perspectives, creative brainstorming, or exploration of multiple solutions is required."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-features",children:(0,i.jsx)(n.strong,{children:"Key Features"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Diverse Output Generation"}),":",(0,i.jsx)(n.br,{}),"\n","Simultaneously query multiple agents to generate a variety of responses to a single query."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Parallel Exploration"}),":",(0,i.jsx)(n.br,{}),"\n","Each agent explores the query independently, ensuring diverse and creative outputs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Flexible Integration"}),":",(0,i.jsx)(n.br,{}),"\n","Compatible with agents from LangChain, Hugging Face, OpenAI, or custom implementations via the ",(0,i.jsx)(n.code,{children:"AgentWrapper"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"LangChain-Compatible"}),":",(0,i.jsx)(n.br,{}),"\n","Can be seamlessly integrated into LangChain workflows."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"api-reference",children:(0,i.jsx)(n.strong,{children:"API Reference"})}),"\n",(0,i.jsx)(n.h3,{id:"class-llmbranching",children:(0,i.jsxs)(n.strong,{children:["Class: ",(0,i.jsx)(n.code,{children:"LLMBranching"})]})}),"\n",(0,i.jsx)(n.p,{children:"Generates diverse responses from multiple agents."}),"\n",(0,i.jsx)(n.h4,{id:"initialization",children:(0,i.jsx)(n.strong,{children:"Initialization"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"LLMBranching(query, clients, verbose=False)\n"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Parameter"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"query"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"str"})}),(0,i.jsx)(n.td,{children:"The input query to be processed by the agents."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"clients"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"list"})}),(0,i.jsx)(n.td,{children:"A list of agents participating in the branching process."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"verbose"})}),(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"bool"})}),(0,i.jsxs)(n.td,{children:["If ",(0,i.jsx)(n.code,{children:"True"}),", enables detailed logging. Default is ",(0,i.jsx)(n.code,{children:"False"}),"."]})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"methods",children:(0,i.jsx)(n.strong,{children:"Methods"})}),"\n",(0,i.jsx)(n.h4,{id:"run",children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"run()"})})}),"\n",(0,i.jsx)(n.p,{children:"Executes the branching workflow, querying all agents and returning their responses."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"list"}),": A list of responses from all participating agents."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:(0,i.jsx)(n.strong,{children:"Examples"})}),"\n",(0,i.jsx)(n.h3,{id:"basic-example",children:(0,i.jsx)(n.strong,{children:"Basic Example"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from langswarm.swarm import LLMBranching\nfrom langswarm.wrappers import AgentWrapper\nfrom langchain.llms import OpenAI\n\n# Step 1: Create and wrap agents\nagent1 = AgentWrapper(agent=OpenAI(model="gpt-4"), is_conversational=True)\nagent2 = AgentWrapper(agent=OpenAI(model="gpt-3.5-turbo"), is_conversational=True)\n\n# Step 2: Initialize LLMBranching with the agents\nquery = "Propose innovative solutions for reducing carbon emissions."\nbranching_swarm = LLMBranching(query=query, clients=[agent1, agent2])\n\n# Step 3: Run the branching workflow\nresponses = branching_swarm.run()\n\n# Display the results\nfor i, response in enumerate(responses):\n    print(f"Agent {i + 1} Response:", response)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"advanced-example-combining-branching-with-analysis",children:(0,i.jsx)(n.strong,{children:"Advanced Example: Combining Branching with Analysis"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'from langswarm.swarm import LLMBranching\nfrom langswarm.wrappers import AgentWrapper\nfrom transformers import pipeline\n\n# Step 1: Create and wrap agents\nhuggingface_agent = AgentWrapper(agent=pipeline("text-generation", model="gpt2"), is_conversational=False)\n\nopenai_agent = AgentWrapper(agent="openai_gpt3", is_conversational=True)  # Assuming an OpenAI agent wrapper\n\n# Step 2: Initialize LLMBranching\nquery = "List creative ways to promote renewable energy adoption."\nbranching_swarm = LLMBranching(query=query, clients=[huggingface_agent, openai_agent])\n\n# Step 3: Run the branching workflow\nresponses = branching_swarm.run()\n\n# Step 4: Analyze the responses\nprint("Collected Responses:")\nfor i, response in enumerate(responses):\n    print(f"Agent {i + 1}:", response)\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:(0,i.jsx)(n.strong,{children:"How It Works"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Querying Agents"}),":",(0,i.jsx)(n.br,{}),"\n","All agents in the ",(0,i.jsx)(n.code,{children:"clients"})," list are queried with the provided input."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Independent Exploration"}),":",(0,i.jsx)(n.br,{}),"\n","Each agent generates a response independently, ensuring diverse outputs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returning Results"}),":",(0,i.jsx)(n.br,{}),"\n","All responses are returned as a list for further processing or analysis."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"best-practices",children:(0,i.jsx)(n.strong,{children:"Best Practices"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Diverse Agents"}),":",(0,i.jsx)(n.br,{}),"\n","Use a mix of agents to ensure varied perspectives and creative solutions."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Enable Verbose Mode"}),":",(0,i.jsx)(n.br,{}),"\n","Use ",(0,i.jsx)(n.code,{children:"verbose=True"})," during development to understand the branching process."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Combine with Other Tools"}),":",(0,i.jsx)(n.br,{}),"\n","Use branching in conjunction with tools like voting or aggregation for enhanced workflows."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"use-cases",children:(0,i.jsx)(n.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Creative Brainstorming"}),":",(0,i.jsx)(n.br,{}),"\n","Generate a variety of ideas or solutions for creative tasks."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Scenario Exploration"}),":",(0,i.jsx)(n.br,{}),"\n","Explore different perspectives or approaches to a given problem."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Diverse Output Generation"}),":",(0,i.jsx)(n.br,{}),"\n","Produce multiple versions of an answer for comparison or refinement."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"key-advantages",children:(0,i.jsx)(n.strong,{children:"Key Advantages"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Enhanced Creativity"}),":",(0,i.jsx)(n.br,{}),"\n","Allows agents to explore queries independently, fostering creative and diverse outputs."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Multi-Agent Collaboration"}),":",(0,i.jsx)(n.br,{}),"\n","Leverages the strengths of multiple agents for broader exploration."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Flexible Integration"}),":",(0,i.jsx)(n.br,{}),"\n","Easily integrates into existing LangChain workflows or standalone applications."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"future-enhancements",children:(0,i.jsx)(n.strong,{children:"Future Enhancements"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Dynamic Agent Selection"}),":",(0,i.jsx)(n.br,{}),"\n","Automatically select agents based on query type or content."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Weighted Branching"}),":",(0,i.jsx)(n.br,{}),"\n","Assign weights to agents based on their reliability or relevance to the query."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Post-Branching Analysis"}),":",(0,i.jsx)(n.br,{}),"\n","Include built-in tools to analyze and rank responses."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"LLMBranching"})," class is a powerful tool for generating diverse outputs from multiple agents. Whether for brainstorming, scenario exploration, or creative workflows, LangSwarm\u2019s branching capabilities ensure a variety of high-quality responses for further analysis or refinement."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>a});var r=s(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);