"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[551],{6914:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>c,frontMatter:()=>t,metadata:()=>r,toc:()=>g});const r=JSON.parse('{"id":"Tools/aggregation-tool","title":"LangSwarmAggregationTool","description":"---","source":"@site/docs/Tools/aggregation-tool.md","sourceDirName":"Tools","slug":"/Tools/aggregation-tool","permalink":"/LangSwarm/Tools/aggregation-tool","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":90,"frontMatter":{"title":"LangSwarmAggregationTool","sidebar_position":90},"sidebar":"defaultSidebar","previous":{"title":"LangSwarmMemoryLLM","permalink":"/LangSwarm/Memory/memory-llm"},"next":{"title":"LangSwarmBranchingTool","permalink":"/LangSwarm/Tools/branching-tool"}}');var i=s(4848),o=s(8453);const t={title:"LangSwarmAggregationTool",sidebar_position:90},a="LangSwarmAggregationTool",l={},g=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Purpose</strong>",id:"purpose",level:2},{value:"<strong>Class Definition</strong>",id:"class-definition",level:2},{value:"<strong>Key Components</strong>",id:"key-components",level:2},{value:"<strong>Usage</strong>",id:"usage",level:2},{value:"<strong>Customization</strong>",id:"customization",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2},{value:"<strong>Comparison with Other Tools</strong>",id:"comparison-with-other-tools",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"langswarmaggregationtool",children:"LangSwarmAggregationTool"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"overview",children:(0,i.jsx)(e.strong,{children:"Overview"})}),"\n",(0,i.jsxs)(e.p,{children:["The ",(0,i.jsx)(e.code,{children:"LangSwarmAggregationTool"})," is a LangChain-compatible tool designed to merge and aggregate responses from multiple Large Language Model (LLM) agents. It uses the ",(0,i.jsx)(e.code,{children:"LLMAggregation"})," class to synthesize diverse responses into a unified output, making it a valuable component for workflows that require consensus or synthesis of information from multiple agents."]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"purpose",children:(0,i.jsx)(e.strong,{children:"Purpose"})}),"\n",(0,i.jsxs)(e.p,{children:["The primary purpose of the ",(0,i.jsx)(e.code,{children:"LangSwarmAggregationTool"})," is:"]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Response Aggregation"}),": To collect, merge, and aggregate responses from multiple agents into a cohesive output."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Pipeline Integration"}),": To provide a reusable tool within LangChain workflows, enabling smooth integration into broader pipelines."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Customization"}),": To allow flexible configuration of the aggregation process using additional parameters."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"class-definition",children:(0,i.jsx)(e.strong,{children:"Class Definition"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'class LangSwarmAggregationTool(Tool):\n    def __init__(self, agents, **kwargs):\n        """\n        Initializes the LangSwarmAggregationTool.\n\n        Parameters:\n        - agents (list): List of agents to use in the aggregation process.\n        - kwargs: Additional parameters for the LLMAggregation class.\n        """\n        self.aggregation = LLMAggregation(clients=agents, **kwargs)\n        super().__init__(\n            name="LangSwarm Aggregation",\n            func=self.run,\n            description="A tool to merge and aggregate responses from multiple agents."\n        )\n\n    def run(self, query, hb):\n        """\n        Executes the aggregation workflow with the given query.\n\n        Parameters:\n        - query (str): The query to process.\n        - hb: Additional aggregation handler, if required.\n\n        Returns:\n        - str: The aggregated result.\n        """\n        self.aggregation.query = query\n        return self.aggregation.run(hb)\n'})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"key-components",children:(0,i.jsx)(e.strong,{children:"Key Components"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:"__init__"})," Method"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Initializes the tool with a list of agents and additional parameters."}),"\n",(0,i.jsxs)(e.li,{children:["Creates an instance of the ",(0,i.jsx)(e.code,{children:"LLMAggregation"})," class to manage the aggregation process."]}),"\n",(0,i.jsxs)(e.li,{children:["Parameters:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"agents"}),": A list of LLM agents contributing to the aggregation process."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"kwargs"}),": Optional parameters passed to configure the ",(0,i.jsx)(e.code,{children:"LLMAggregation"})," class."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Inherits from the ",(0,i.jsx)(e.code,{children:"Tool"})," class, defining the tool's name and description."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.strong,{children:[(0,i.jsx)(e.code,{children:"run"})," Method"]})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Executes the aggregation workflow."}),"\n",(0,i.jsxs)(e.li,{children:["Parameters:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"query"}),": The query string to be processed."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.code,{children:"hb"}),": An additional handler (if required) for the aggregation process."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["Workflow:","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["Assigns the query to the ",(0,i.jsx)(e.code,{children:"LLMAggregation"})," instance."]}),"\n",(0,i.jsxs)(e.li,{children:["Calls the ",(0,i.jsx)(e.code,{children:"run"})," method of ",(0,i.jsx)(e.code,{children:"LLMAggregation"})," to generate the aggregated result."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.li,{children:"Returns the aggregated result as a string."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"usage",children:(0,i.jsx)(e.strong,{children:"Usage"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Initialization"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:"from langswarm.swarm.aggregation import LLMAggregation\nfrom mymodule import LangSwarmAggregationTool\n\n# Example list of agents (LLM clients)\nagents = [agent1, agent2, agent3]\n\n# Initialize the LangSwarmAggregationTool\ntool = LangSwarmAggregationTool(agents=agents, param1=value1, param2=value2)\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Execution"})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'# Input query and handler\nquery = "Summarize the advantages of renewable energy."\nhandler = some_handler_object\n\n# Get the aggregated result\nresult = tool.run(query, handler)\nprint("Aggregated Result:", result)\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Integration with LangChain Workflows"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["The ",(0,i.jsx)(e.code,{children:"LangSwarmAggregationTool"})," can be directly used as a tool in LangChain workflows."]}),"\n"]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'from langchain.agents import initialize_agent\n\ntools = [tool]\nagent = initialize_agent(tools, llm, agent="zero-shot-react-description")\n\n# Run the agent with the tool\nresult = agent.run("Summarize the benefits of AI in education.")\nprint(result)\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"customization",children:(0,i.jsx)(e.strong,{children:"Customization"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Adding Custom Parameters"}),": Additional parameters can be passed to ",(0,i.jsx)(e.code,{children:"LLMAggregation"})," during initialization to customize the aggregation logic."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Extending the Tool"}),": Subclass ",(0,i.jsx)(e.code,{children:"LangSwarmAggregationTool"})," to introduce additional functionality, such as pre- or post-processing of responses."]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"use-cases",children:(0,i.jsx)(e.strong,{children:"Use Cases"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Consensus Building"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Aggregate responses from multiple agents to derive a consensus-driven answer."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Data Synthesis"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Merge diverse information from different agents into a single cohesive output."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Summarization"}),":","\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsx)(e.li,{children:"Generate summaries by aggregating multiple perspectives on a given topic."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h2,{id:"comparison-with-other-tools",children:(0,i.jsx)(e.strong,{children:"Comparison with Other Tools"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"LangSwarmAggregationTool"}),": Focuses on merging and synthesizing responses into a unified output."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"BranchingChain"}),": Explores diverse responses without merging them into a single result."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"VotingChain"}),": Selects the most popular response among agents based on a voting mechanism."]}),"\n"]})]})}function c(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>t,x:()=>a});var r=s(6540);const i={},o=r.createContext(i);function t(n){const e=r.useContext(o);return r.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:t(n.components),r.createElement(o.Provider,{value:e},n.children)}}}]);