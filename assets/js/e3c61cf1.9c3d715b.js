"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[619],{9617:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"tutorials/consensus","title":"Using LangSwarm LLMConsensus with LangChain for Multi-LLM Collaboration","description":"Using LangSwarm LLMConsensus with LangChain for Multi-LLM Collaboration","source":"@site/docs/tutorials/consensus.md","sourceDirName":"tutorials","slug":"/tutorials/consensus","permalink":"/LangSwarm/tutorials/consensus","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"title":"Using LangSwarm LLMConsensus with LangChain for Multi-LLM Collaboration"},"sidebar":"defaultSidebar","previous":{"title":"Getting Started with LangSwarm","permalink":"/LangSwarm/"}}');var a=s(4848),o=s(8453);const r={title:"Using LangSwarm LLMConsensus with LangChain for Multi-LLM Collaboration"},i=void 0,l={},c=[{value:"Using <strong>LangSwarm LLMConsensus</strong> with LangChain for Multi-LLM Collaboration",id:"using-langswarm-llmconsensus-with-langchain-for-multi-llm-collaboration",level:3},{value:"<strong>Prerequisites</strong>",id:"prerequisites",level:3},{value:"<strong>Overview</strong>",id:"overview",level:3},{value:"<strong>Code Walkthrough</strong>",id:"code-walkthrough",level:3},{value:"<strong>Step 1: Define Agents</strong>",id:"step-1-define-agents",level:4},{value:"<strong>Step 2: Achieve Consensus</strong>",id:"step-2-achieve-consensus",level:4},{value:"<strong>Step 3: Integrate with LangChain</strong>",id:"step-3-integrate-with-langchain",level:4},{value:"<strong>Expected Output</strong>",id:"expected-output",level:3},{value:"<strong>Why This is Powerful</strong>",id:"why-this-is-powerful",level:3},{value:"<strong>Next Steps</strong>",id:"next-steps",level:3}];function h(n){const e={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(e.h3,{id:"using-langswarm-llmconsensus-with-langchain-for-multi-llm-collaboration",children:["Using ",(0,a.jsx)(e.strong,{children:"LangSwarm LLMConsensus"})," with LangChain for Multi-LLM Collaboration"]}),"\n",(0,a.jsxs)(e.p,{children:["This tutorial demonstrates how to use ",(0,a.jsx)(e.strong,{children:"LangSwarm"}),"'s ",(0,a.jsx)(e.code,{children:"LLMConsensus"})," within a LangChain workflow to create a multi-LLM solution. The workflow combines multiple language models to achieve a consensus on a query and integrates this capability seamlessly into LangChain."]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"prerequisites",children:(0,a.jsx)(e.strong,{children:"Prerequisites"})}),"\n",(0,a.jsx)(e.p,{children:"Before we begin, ensure you have the following installed:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-bash",children:"pip install langswarm langchain langchain-openai transformers\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"overview",children:(0,a.jsx)(e.strong,{children:"Overview"})}),"\n",(0,a.jsx)(e.p,{children:"We will:"}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsx)(e.li,{children:"Define multiple agents using LangSwarm."}),"\n",(0,a.jsxs)(e.li,{children:["Use ",(0,a.jsx)(e.code,{children:"LLMConsensus"})," to achieve agreement among these agents on a query."]}),"\n",(0,a.jsxs)(e.li,{children:["Integrate the consensus output into a LangChain ",(0,a.jsx)(e.code,{children:"LLMChain"})," to simulate downstream workflows."]}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'"""\nLangSwarm + LangChain Tutorial\n\nThis script demonstrates how to use LangSwarm\'s LLMConsensus class to reach consensus\namong multiple LLMs and use that consensus in a LangChain workflow.\n\nKey Features:\n- Multi-agent collaboration via LangSwarm.\n- Consensus-based decision-making with `LLMConsensus`.\n- Integration with LangChain for downstream processing.\n\n"""\n\n# Import necessary libraries\nfrom langswarm.swarm import LLMConsensus  # LangSwarm consensus tool\nfrom langswarm.agent import OpenAIAgent   # LangSwarm agent for OpenAI\nfrom langchain.prompts import PromptTemplate  # LangChain prompt templates\nfrom langchain.chains import LLMChain        # LangChain chain framework\nfrom langchain.llms import OpenAI            # Native LangChain OpenAI LLM\n\n# Step 1: Define multiple agents\n"""\nHere, we define three agents using LangSwarm\'s OpenAIAgent wrapper.\nEach agent represents an independent LLM instance, which we will use for collaboration.\n"""\nagent1 = OpenAIAgent(api_key="your_openai_api_key", model="gpt-4")\nagent2 = OpenAIAgent(api_key="your_openai_api_key", model="gpt-3.5-turbo")\nagent3 = OpenAIAgent(api_key="your_openai_api_key", model="gpt-3.5-turbo-instruct")\n\n# Step 2: Create a consensus swarm\n"""\nThe LLMConsensus class takes a query and a list of agents, then uses LangSwarm\'s\norchestration to determine the best (agreed-upon) response among the agents.\n"""\nquery = "What are the key causes of climate change?"\nconsensus_swarm = LLMConsensus(query=query, clients=[agent1, agent2, agent3])\n\n# Run the consensus swarm to get a unified response\nconsensus_response = consensus_swarm.run()\n\n# Print the consensus response\nprint("Consensus Response:", consensus_response)\n\n# Step 3: Use the consensus response in a LangChain workflow\n"""\nIn this step, we integrate the consensus response into a LangChain `LLMChain`.\nThe response serves as input for further downstream processing.\n"""\n\n# Define a LangChain prompt template\nprompt = PromptTemplate(\n    input_variables=["consensus_response"],\n    template="Based on the following consensus, summarize key solutions:\\n\\n{consensus_response}"\n)\n\n# Create a LangChain LLMChain using OpenAI\n"""\nWe use a LangChain OpenAI LLM here to process the consensus response and generate\na summary of potential solutions for climate change.\n"""\nchain = LLMChain(llm=OpenAI(model="gpt-3.5-turbo"), prompt=prompt)\n\n# Run the LangChain chain with the consensus response\nsummary = chain.run(consensus_response)\n\n# Print the final output\nprint("\\nSummary of Solutions:")\nprint(summary)\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"code-walkthrough",children:(0,a.jsx)(e.strong,{children:"Code Walkthrough"})}),"\n",(0,a.jsx)(e.h4,{id:"step-1-define-agents",children:(0,a.jsx)(e.strong,{children:"Step 1: Define Agents"})}),"\n",(0,a.jsxs)(e.p,{children:["We define three agents (",(0,a.jsx)(e.code,{children:"agent1"}),", ",(0,a.jsx)(e.code,{children:"agent2"}),", ",(0,a.jsx)(e.code,{children:"agent3"}),") using LangSwarm's ",(0,a.jsx)(e.code,{children:"OpenAIAgent"}),". Each agent queries a different OpenAI model, simulating a multi-agent collaboration."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'agent1 = OpenAIAgent(api_key="your_openai_api_key", model="gpt-4")\nagent2 = OpenAIAgent(api_key="your_openai_api_key", model="gpt-3.5-turbo")\nagent3 = OpenAIAgent(api_key="your_openai_api_key", model="gpt-3.5-turbo-instruct")\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h4,{id:"step-2-achieve-consensus",children:(0,a.jsx)(e.strong,{children:"Step 2: Achieve Consensus"})}),"\n",(0,a.jsxs)(e.p,{children:["We use ",(0,a.jsx)(e.code,{children:"LLMConsensus"})," to determine a unified response to a query. The ",(0,a.jsx)(e.code,{children:"LLMConsensus"})," class compares the outputs of all agents and selects the most agreed-upon response."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'query = "What are the key causes of climate change?"\nconsensus_swarm = LLMConsensus(query=query, clients=[agent1, agent2, agent3])\nconsensus_response = consensus_swarm.run()\nprint("Consensus Response:", consensus_response)\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h4,{id:"step-3-integrate-with-langchain",children:(0,a.jsx)(e.strong,{children:"Step 3: Integrate with LangChain"})}),"\n",(0,a.jsxs)(e.p,{children:["The consensus response is passed to a LangChain ",(0,a.jsx)(e.code,{children:"LLMChain"})," for further processing. This demonstrates how LangSwarm can be seamlessly integrated into LangChain workflows."]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-python",children:'prompt = PromptTemplate(\n    input_variables=["consensus_response"],\n    template="Based on the following consensus, summarize key solutions:\\n\\n{consensus_response}"\n)\n\nchain = LLMChain(llm=OpenAI(model="gpt-3.5-turbo"), prompt=prompt)\nsummary = chain.run(consensus_response)\nprint("\\nSummary of Solutions:")\nprint(summary)\n'})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"expected-output",children:(0,a.jsx)(e.strong,{children:"Expected Output"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-plaintext",children:"Consensus Response: The key causes of climate change include greenhouse gas emissions from burning fossil fuels, deforestation, and industrial activities.\n\nSummary of Solutions:\nTo address climate change, key solutions include transitioning to renewable energy sources, promoting reforestation, reducing industrial emissions, and increasing public awareness about sustainable practices.\n"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"why-this-is-powerful",children:(0,a.jsx)(e.strong,{children:"Why This is Powerful"})}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Collaboration Across Models:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Use multiple models collaboratively to generate robust and validated outputs."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Seamless Integration:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Combine LangSwarm's orchestration tools with LangChain's powerful chains and workflows."}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.strong,{children:"Scalable Multi-Agent Workflows:"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Extend this approach to include routing, aggregation, and voting for even more complex workflows."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h3,{id:"next-steps",children:(0,a.jsx)(e.strong,{children:"Next Steps"})}),"\n",(0,a.jsxs)(e.ol,{children:["\n",(0,a.jsxs)(e.li,{children:["Experiment with additional Swarm classes like ",(0,a.jsx)(e.code,{children:"LLMAggregation"})," or ",(0,a.jsx)(e.code,{children:"LLMBranching"}),"."]}),"\n",(0,a.jsx)(e.li,{children:"Use LangChain's memory systems with LangSwarm agents for enhanced context tracking."}),"\n",(0,a.jsx)(e.li,{children:"Add more agents (e.g., Hugging Face models) to diversify the collaboration."}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"With LangSwarm and LangChain, you can build scalable, intelligent workflows tailored to your specific needs."})]})}function u(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(h,{...n})}):h(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>i});var t=s(6540);const a={},o=t.createContext(a);function r(n){const e=t.useContext(o);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function i(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),t.createElement(o.Provider,{value:e},n.children)}}}]);