"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[47],{3737:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>g,frontMatter:()=>r,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Tools/voting-tool","title":"LangSwarmVotingTool","description":"---","source":"@site/docs/Tools/voting-tool.md","sourceDirName":"Tools","slug":"/Tools/voting-tool","permalink":"/LangSwarm/Tools/voting-tool","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":94,"frontMatter":{"title":"LangSwarmVotingTool","sidebar_position":94},"sidebar":"defaultSidebar","previous":{"title":"LangSwarmRoutingTool","permalink":"/LangSwarm/Tools/routing-tool"},"next":{"title":"Aggregation with LangChain","permalink":"/LangSwarm/Tutorials/aggregation"}}');var o=s(4848),t=s(8453);const r={title:"LangSwarmVotingTool",sidebar_position:94},l="LangSwarmVotingTool",a={},c=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Purpose</strong>",id:"purpose",level:2},{value:"<strong>Class Definition</strong>",id:"class-definition",level:2},{value:"<strong>Key Components</strong>",id:"key-components",level:2},{value:"<strong>Usage</strong>",id:"usage",level:2},{value:"<strong>Customization</strong>",id:"customization",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2},{value:"<strong>Comparison with Other Tools</strong>",id:"comparison-with-other-tools",level:2}];function d(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"langswarmvotingtool",children:"LangSwarmVotingTool"})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"overview",children:(0,o.jsx)(e.strong,{children:"Overview"})}),"\n",(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.code,{children:"LangSwarmVotingTool"})," is a LangChain-compatible tool designed to facilitate voting-based decision-making among multiple Large Language Model (LLM) agents. It uses the ",(0,o.jsx)(e.code,{children:"LLMVoting"})," class to aggregate responses from multiple agents, tally votes, and determine a consensus result."]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"purpose",children:(0,o.jsx)(e.strong,{children:"Purpose"})}),"\n",(0,o.jsxs)(e.p,{children:["The primary purpose of the ",(0,o.jsx)(e.code,{children:"LangSwarmVotingTool"})," is:"]}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Collaborative Decision-Making"}),": To enable developers to use a voting mechanism as a step in LangChain workflows for determining the best or most popular response among agents."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Pipeline Integration"}),": To serve as a modular voting tool that integrates seamlessly into broader LangChain pipelines."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Transparency"}),": To provide detailed insights into the voting process, including the group size and all individual responses."]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"class-definition",children:(0,o.jsx)(e.strong,{children:"Class Definition"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'class LangSwarmVotingTool(Tool):\n    def __init__(self, agents, **kwargs):\n        """\n        Initializes the LangSwarmVotingTool.\n\n        Parameters:\n        - agents (list): List of agents to use in the voting process.\n        - kwargs: Additional parameters for the LLMVoting class.\n        """\n        self.voting = LLMVoting(clients=agents, **kwargs)\n        super().__init__(\n            name="LangSwarm Voting",\n            func=self.run,\n            description="A tool to enable voting-based decision-making among agents."\n        )\n\n    def run(self, query):\n        """\n        Executes the voting workflow with the given query.\n\n        Parameters:\n        - query (str): The query to process.\n\n        Returns:\n        - tuple: The consensus result, group size, and list of responses.\n        """\n        self.voting.query = query\n        return self.voting.run()\n'})}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"key-components",children:(0,o.jsx)(e.strong,{children:"Key Components"})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsxs)(e.strong,{children:[(0,o.jsx)(e.code,{children:"__init__"})," Method"]})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Initializes the tool with a list of agents and additional parameters."}),"\n",(0,o.jsxs)(e.li,{children:["Creates an instance of the ",(0,o.jsx)(e.code,{children:"LLMVoting"})," class to handle the voting process."]}),"\n",(0,o.jsxs)(e.li,{children:["Parameters:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"agents"}),": A list of LLM agents contributing to the voting process."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"kwargs"}),": Optional parameters passed to configure the ",(0,o.jsx)(e.code,{children:"LLMVoting"})," class."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["Inherits from the ",(0,o.jsx)(e.code,{children:"Tool"})," class, defining the tool's name and description."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsxs)(e.strong,{children:[(0,o.jsx)(e.code,{children:"run"})," Method"]})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Executes the voting workflow."}),"\n",(0,o.jsxs)(e.li,{children:["Parameters:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"query"}),": The query string to be processed."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["Workflow:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["Assigns the query to the ",(0,o.jsx)(e.code,{children:"LLMVoting"})," instance."]}),"\n",(0,o.jsxs)(e.li,{children:["Calls the ",(0,o.jsx)(e.code,{children:"run"})," method of ",(0,o.jsx)(e.code,{children:"LLMVoting"})," to tally votes and determine a consensus result."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["Returns a tuple containing:","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"consensus_result"}),": The final result based on the votes."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"group_size"}),": The number of agents participating in the voting process."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.code,{children:"responses"}),": A list of all responses from the agents."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"usage",children:(0,o.jsx)(e.strong,{children:"Usage"})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Initialization"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:"from langswarm.swarm.voting import LLMVoting\nfrom mymodule import LangSwarmVotingTool\n\n# Example list of agents (LLM clients)\nagents = [agent1, agent2, agent3]\n\n# Initialize the LangSwarmVotingTool\ntool = LangSwarmVotingTool(agents=agents, param1=value1, param2=value2)\n"})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Execution"})}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'# Input query\nquery = "What is the best renewable energy source?"\n\n# Get the voting result\nconsensus_result, group_size, responses = tool.run(query)\nprint("Consensus Result:", consensus_result)\nprint("Group Size:", group_size)\nprint("All Responses:", responses)\n'})}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:["\n",(0,o.jsx)(e.p,{children:(0,o.jsx)(e.strong,{children:"Integration with LangChain Workflows"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:["The ",(0,o.jsx)(e.code,{children:"LangSwarmVotingTool"})," can be directly used as a tool in LangChain workflows."]}),"\n"]}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-python",children:'from langchain.agents import initialize_agent\n\ntools = [tool]\nagent = initialize_agent(tools, llm, agent="zero-shot-react-description")\n\n# Run the agent with the tool\nresult = agent.run("How should governments incentivize green energy?")\nprint(result)\n'})}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"customization",children:(0,o.jsx)(e.strong,{children:"Customization"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Adding Custom Parameters"}),": Additional parameters can be passed to ",(0,o.jsx)(e.code,{children:"LLMVoting"})," during initialization to customize the voting logic."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Extending the Tool"}),": Subclass ",(0,o.jsx)(e.code,{children:"LangSwarmVotingTool"})," to modify or enhance the voting logic, such as weighting votes or applying additional filters."]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"use-cases",children:(0,o.jsx)(e.strong,{children:"Use Cases"})}),"\n",(0,o.jsxs)(e.ol,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Decision-Making"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Use voting among agents to identify the best or most popular solution to a problem."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Validation"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Validate outputs by requiring a majority agreement among agents."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Ranking"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Rank multiple responses based on agent votes, highlighting the top result."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"Bias Mitigation"}),":","\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsx)(e.li,{children:"Aggregate diverse perspectives to reduce individual agent biases."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(e.hr,{}),"\n",(0,o.jsx)(e.h2,{id:"comparison-with-other-tools",children:(0,o.jsx)(e.strong,{children:"Comparison with Other Tools"})}),"\n",(0,o.jsxs)(e.ul,{children:["\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"LangSwarmVotingTool"}),": Uses a voting mechanism to determine the most agreed-upon response among agents."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"LangSwarmConsensusTool"}),": Focuses on achieving a unified result through consensus but without explicitly tallying votes."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"LangSwarmBranchingTool"}),": Generates diverse responses without reconciling them into a single result."]}),"\n",(0,o.jsxs)(e.li,{children:[(0,o.jsx)(e.strong,{children:"LangSwarmAggregationTool"}),": Merges responses into a unified result without requiring strict agreement or tallying."]}),"\n"]})]})}function g(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(d,{...n})}):d(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>r,x:()=>l});var i=s(6540);const o={},t=i.createContext(o);function r(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);