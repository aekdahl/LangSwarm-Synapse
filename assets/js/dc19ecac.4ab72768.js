"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[214],{9900:(n,e,s)=>{s.r(e),s.d(e,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"Chains/aggregation-chain","title":"AggregationChain","description":"---","source":"@site/docs/Chains/aggregation-chain.md","sourceDirName":"Chains","slug":"/Chains/aggregation-chain","permalink":"/LangSwarm/Chains/aggregation-chain","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":30,"frontMatter":{"title":"AggregationChain","sidebar_position":30},"sidebar":"defaultSidebar","previous":{"title":"Bring Your Own Agent","permalink":"/LangSwarm/bring-your-own-agent"},"next":{"title":"BranchingChain","permalink":"/LangSwarm/Chains/branching-chain"}}');var r=s(4848),t=s(8453);const a={title:"AggregationChain",sidebar_position:30},l="AggregationChain",o={},h=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Purpose</strong>",id:"purpose",level:2},{value:"<strong>Class Definition</strong>",id:"class-definition",level:2},{value:"<strong>Key Components</strong>",id:"key-components",level:2},{value:"<strong>Usage</strong>",id:"usage",level:2},{value:"<strong>Customization</strong>",id:"customization",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2}];function c(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"aggregationchain",children:"AggregationChain"})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"overview",children:(0,r.jsx)(e.strong,{children:"Overview"})}),"\n",(0,r.jsxs)(e.p,{children:["The ",(0,r.jsx)(e.code,{children:"AggregationChain"})," class is a custom, LangChain-compatible chain designed to facilitate response aggregation from multiple Large Language Model (LLM) agents. It integrates with LangChain's ecosystem and uses the ",(0,r.jsx)(e.code,{children:"LLMAggregation"})," class for merging and synthesizing responses."]}),"\n",(0,r.jsxs)(e.p,{children:["This class is suitable for scenarios where multiple LLM agents contribute responses, and a unified or aggregated result is needed. The ",(0,r.jsx)(e.code,{children:"AggregationChain"})," can be seamlessly integrated into complex pipelines involving other tools or agents."]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"purpose",children:(0,r.jsx)(e.strong,{children:"Purpose"})}),"\n",(0,r.jsxs)(e.p,{children:["The primary purpose of the ",(0,r.jsx)(e.code,{children:"AggregationChain"})," class is:"]}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Aggregation Workflows"}),": To aggregate and synthesize responses from multiple LLM agents."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Pipeline Integration"}),": To act as a reusable chain within LangChain pipelines, enabling smooth interoperability with other chains, tools, or agents."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Customization"}),": To allow flexible configurations of the aggregation process through additional parameters."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"class-definition",children:(0,r.jsx)(e.strong,{children:"Class Definition"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'class AggregationChain(Chain):\n    def __init__(self, agents, **kwargs):\n        """\n        Initializes the AggregationChain.\n\n        Parameters:\n        - agents (list): List of agents to use in the aggregation process.\n        - kwargs: Additional parameters for the LLMAggregation class.\n        """\n        self.aggregation = LLMAggregation(clients=agents, **kwargs)\n\n    @property\n    def input_keys(self):\n        """Define input keys for the chain."""\n        return ["query", "hb"]\n\n    @property\n    def output_keys(self):\n        """Define output keys for the chain."""\n        return ["aggregated_result"]\n\n    def _call(self, inputs):\n        """\n        Processes the input query and returns the aggregated result.\n\n        Parameters:\n        - inputs (dict): Dictionary containing the query and handler.\n\n        Returns:\n        - dict: Dictionary containing the aggregated result.\n        """\n        query = inputs["query"]\n        hb = inputs["hb"]\n        self.aggregation.query = query\n        result = self.aggregation.run(hb)\n        return {"aggregated_result": result}\n'})}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"key-components",children:(0,r.jsx)(e.strong,{children:"Key Components"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"__init__"})," Method"]})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Initializes the chain with a list of agents and additional parameters."}),"\n",(0,r.jsxs)(e.li,{children:["Creates an instance of the ",(0,r.jsx)(e.code,{children:"LLMAggregation"})," class to handle the aggregation process."]}),"\n",(0,r.jsxs)(e.li,{children:["Parameters:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"agents"}),": A list of LLM agents used for aggregation."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"kwargs"}),": Optional parameters passed to configure the ",(0,r.jsx)(e.code,{children:"LLMAggregation"})," class."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"input_keys"})," Property"]})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Specifies the input keys required by the chain."}),"\n",(0,r.jsxs)(e.li,{children:["Inputs:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"query"}),": The user query or task to be processed."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"hb"}),": Handler or additional parameter used during the aggregation process."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"output_keys"})," Property"]})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Specifies the output key returned by the chain."}),"\n",(0,r.jsxs)(e.li,{children:["Outputs:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.code,{children:"aggregated_result"}),": The synthesized result from multiple agents."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsxs)(e.strong,{children:[(0,r.jsx)(e.code,{children:"_call"})," Method"]})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Core logic for executing the chain."}),"\n",(0,r.jsxs)(e.li,{children:["Workflow:","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["Accepts ",(0,r.jsx)(e.code,{children:"query"})," and ",(0,r.jsx)(e.code,{children:"hb"})," as inputs."]}),"\n",(0,r.jsxs)(e.li,{children:["Assigns the ",(0,r.jsx)(e.code,{children:"query"})," to the ",(0,r.jsx)(e.code,{children:"LLMAggregation"})," instance."]}),"\n",(0,r.jsxs)(e.li,{children:["Calls the ",(0,r.jsx)(e.code,{children:"run"})," method of ",(0,r.jsx)(e.code,{children:"LLMAggregation"})," to generate the aggregated result."]}),"\n",(0,r.jsx)(e.li,{children:"Returns the aggregated result as a dictionary."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"usage",children:(0,r.jsx)(e.strong,{children:"Usage"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Initialization"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from langswarm.swarm.aggregation import LLMAggregation\nfrom mymodule import AggregationChain\n\n# Example list of agents (LLM clients)\nagents = [agent1, agent2, agent3]\n\n# Initialize the AggregationChain\nchain = AggregationChain(agents=agents, param1=value1, param2=value2)\n"})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Execution"})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:'# Input data\ninputs = {\n    "query": "What are the benefits of renewable energy?",\n    "hb": some_handler_object,\n}\n\n# Get the aggregated result\nresult = chain(inputs)\nprint(result["aggregated_result"])\n'})}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:["\n",(0,r.jsx)(e.p,{children:(0,r.jsx)(e.strong,{children:"Integration with LangChain Pipelines"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:["The ",(0,r.jsx)(e.code,{children:"AggregationChain"})," can be integrated into LangChain workflows as a standalone chain or in combination with other chains and tools."]}),"\n"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-python",children:"from langchain.chains import SequentialChain\n\n# Example pipeline\npipeline = SequentialChain(chains=[chain, another_chain])\npipeline.run(inputs)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"customization",children:(0,r.jsx)(e.strong,{children:"Customization"})}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Adding Custom Parameters"}),": You can pass additional parameters to ",(0,r.jsx)(e.code,{children:"LLMAggregation"})," via the ",(0,r.jsx)(e.code,{children:"kwargs"})," argument when initializing the chain."]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Extending the Chain"}),": Subclass ",(0,r.jsx)(e.code,{children:"AggregationChain"})," to override methods like ",(0,r.jsx)(e.code,{children:"_call"})," or introduce new logic."]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsx)(e.h2,{id:"use-cases",children:(0,r.jsx)(e.strong,{children:"Use Cases"})}),"\n",(0,r.jsxs)(e.ol,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Consensus and Review"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Aggregate opinions or insights from multiple LLMs to derive a consensus-based response."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Data Synthesis"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Combine and refine data or outputs from multiple sources."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Toolchain Integration"}),":","\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Use as part of a broader workflow where aggregation of results is required."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(e.hr,{}),"\n",(0,r.jsxs)(e.p,{children:["This documentation provides a detailed understanding of the purpose, structure, and usage of the ",(0,r.jsx)(e.code,{children:"AggregationChain"})," class. Let me know if you'd like to enhance or tailor it further!"]})]})}function d(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(c,{...n})}):c(n)}},8453:(n,e,s)=>{s.d(e,{R:()=>a,x:()=>l});var i=s(6540);const r={},t=i.createContext(r);function a(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);