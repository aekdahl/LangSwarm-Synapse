"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[494],{9924:(n,s,e)=>{e.r(s),e.d(s,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Chains/consensus-chain","title":"ConsensusChain","description":"---","source":"@site/docs/Chains/consensus-chain.md","sourceDirName":"Chains","slug":"/Chains/consensus-chain","permalink":"/LangSwarm/Chains/consensus-chain","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":32,"frontMatter":{"title":"ConsensusChain","sidebar_position":32},"sidebar":"defaultSidebar","previous":{"title":"BranchingChain","permalink":"/LangSwarm/Chains/branching-chain"},"next":{"title":"RoutingChain","permalink":"/LangSwarm/Chains/routing-chain"}}');var r=e(4848),t=e(8453);const o={title:"ConsensusChain",sidebar_position:32},l="ConsensusChain",a={},c=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Purpose</strong>",id:"purpose",level:2},{value:"<strong>Class Definition</strong>",id:"class-definition",level:2},{value:"<strong>Key Components</strong>",id:"key-components",level:2},{value:"<strong>Usage</strong>",id:"usage",level:2},{value:"<strong>Customization</strong>",id:"customization",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2},{value:"<strong>Comparison with <code>AggregationChain</code></strong>",id:"comparison-with-aggregationchain",level:2}];function h(n){const s={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"consensuschain",children:"ConsensusChain"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"overview",children:(0,r.jsx)(s.strong,{children:"Overview"})}),"\n",(0,r.jsxs)(s.p,{children:["The ",(0,r.jsx)(s.code,{children:"ConsensusChain"})," class is a custom, LangChain-compatible chain designed to facilitate consensus-building among multiple Large Language Model (LLM) agents. It integrates seamlessly into LangChain workflows, leveraging the ",(0,r.jsx)(s.code,{children:"LLMConsensus"})," class to determine the most agreed-upon response from multiple agents."]}),"\n",(0,r.jsx)(s.p,{children:"This chain is particularly useful in scenarios where multiple agents provide diverse responses, and a unified, consensus-driven answer is required."}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"purpose",children:(0,r.jsx)(s.strong,{children:"Purpose"})}),"\n",(0,r.jsxs)(s.p,{children:["The primary purpose of the ",(0,r.jsx)(s.code,{children:"ConsensusChain"})," class is:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Consensus-Building"}),": To determine a single, consensus-driven output from multiple LLM agents."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Pipeline Integration"}),": To act as a reusable chain within LangChain pipelines, enabling smooth integration with other chains, tools, or agents."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Flexibility"}),": To allow customization of the consensus-building process through configurable parameters."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"class-definition",children:(0,r.jsx)(s.strong,{children:"Class Definition"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'class ConsensusChain(Chain):\n    def __init__(self, agents, **kwargs):\n        """\n        Initializes the ConsensusChain.\n\n        Parameters:\n        - agents (list): List of agents to use in the consensus process.\n        - kwargs: Additional parameters for the LLMConsensus class.\n        """\n        self.consensus = LLMConsensus(clients=agents, **kwargs)\n\n    @property\n    def input_keys(self):\n        """Define input keys for the chain."""\n        return ["query"]\n\n    @property\n    def output_keys(self):\n        """Define output keys for the chain."""\n        return ["consensus_result"]\n\n    def _call(self, inputs):\n        """\n        Processes the input query and returns the consensus result.\n\n        Parameters:\n        - inputs (dict): Dictionary containing the query.\n\n        Returns:\n        - dict: Dictionary containing the consensus result.\n        """\n        query = inputs["query"]\n        self.consensus.query = query\n        result = self.consensus.run()\n        return {"consensus_result": result}\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"key-components",children:(0,r.jsx)(s.strong,{children:"Key Components"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"__init__"})," Method"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Initializes the chain with a list of agents and additional parameters."}),"\n",(0,r.jsxs)(s.li,{children:["Creates an instance of the ",(0,r.jsx)(s.code,{children:"LLMConsensus"})," class to handle consensus-building."]}),"\n",(0,r.jsxs)(s.li,{children:["Parameters:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"agents"}),": A list of LLM agents contributing to the consensus process."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"kwargs"}),": Optional parameters passed to configure the ",(0,r.jsx)(s.code,{children:"LLMConsensus"})," class."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"input_keys"})," Property"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Specifies the input keys required by the chain."}),"\n",(0,r.jsxs)(s.li,{children:["Inputs:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"query"}),": The user query or task to be resolved through consensus."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"output_keys"})," Property"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Specifies the output key returned by the chain."}),"\n",(0,r.jsxs)(s.li,{children:["Outputs:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"consensus_result"}),": The final result agreed upon by the agents."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsxs)(s.strong,{children:[(0,r.jsx)(s.code,{children:"_call"})," Method"]})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Core logic for executing the chain."}),"\n",(0,r.jsxs)(s.li,{children:["Workflow:","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["Accepts a ",(0,r.jsx)(s.code,{children:"query"})," input."]}),"\n",(0,r.jsxs)(s.li,{children:["Assigns the ",(0,r.jsx)(s.code,{children:"query"})," to the ",(0,r.jsx)(s.code,{children:"LLMConsensus"})," instance."]}),"\n",(0,r.jsxs)(s.li,{children:["Calls the ",(0,r.jsx)(s.code,{children:"run"})," method of ",(0,r.jsx)(s.code,{children:"LLMConsensus"})," to compute the consensus result."]}),"\n",(0,r.jsx)(s.li,{children:"Returns the consensus result as a dictionary."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"usage",children:(0,r.jsx)(s.strong,{children:"Usage"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Initialization"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from langswarm.swarm.consensus import LLMConsensus\nfrom mymodule import ConsensusChain\n\n# Example list of agents (LLM clients)\nagents = [agent1, agent2, agent3]\n\n# Initialize the ConsensusChain\nchain = ConsensusChain(agents=agents, param1=value1, param2=value2)\n"})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Execution"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# Input data\ninputs = {\n    "query": "What is the best programming language for web development?",\n}\n\n# Get the consensus result\nresult = chain(inputs)\nprint(result["consensus_result"])\n'})}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:["\n",(0,r.jsx)(s.p,{children:(0,r.jsx)(s.strong,{children:"Integration with LangChain Pipelines"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:["The ",(0,r.jsx)(s.code,{children:"ConsensusChain"})," can be integrated into LangChain workflows as a standalone chain or in combination with other chains and tools."]}),"\n"]}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"from langchain.chains import SequentialChain\n\n# Example pipeline\npipeline = SequentialChain(chains=[chain, another_chain])\npipeline.run(inputs)\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"customization",children:(0,r.jsx)(s.strong,{children:"Customization"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Adding Custom Parameters"}),": Pass additional parameters to ",(0,r.jsx)(s.code,{children:"LLMConsensus"})," via the ",(0,r.jsx)(s.code,{children:"kwargs"})," argument when initializing the chain."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Extending the Chain"}),": Subclass ",(0,r.jsx)(s.code,{children:"ConsensusChain"})," to override methods like ",(0,r.jsx)(s.code,{children:"_call"})," or introduce new logic."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"use-cases",children:(0,r.jsx)(s.strong,{children:"Use Cases"})}),"\n",(0,r.jsxs)(s.ol,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Validation of LLM Outputs"}),":","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Achieve consensus among multiple agents to validate the correctness of answers."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Bias Reduction"}),":","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Aggregate diverse perspectives from different agents to mitigate individual biases."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Decision-Making"}),":","\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsx)(s.li,{children:"Resolve conflicting outputs by finding the most agreed-upon response."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"comparison-with-aggregationchain",children:(0,r.jsxs)(s.strong,{children:["Comparison with ",(0,r.jsx)(s.code,{children:"AggregationChain"})]})}),"\n",(0,r.jsxs)(s.p,{children:["While both ",(0,r.jsx)(s.code,{children:"ConsensusChain"})," and ",(0,r.jsx)(s.code,{children:"AggregationChain"})," process outputs from multiple agents:"]}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"AggregationChain"}),": Merges and synthesizes diverse responses into a single, coherent result."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"ConsensusChain"}),": Focuses on finding agreement among agents to determine a unified response."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsxs)(s.p,{children:["This documentation provides detailed insights into the purpose, structure, and usage of the ",(0,r.jsx)(s.code,{children:"ConsensusChain"})," class. Let me know if you'd like to elaborate further on any aspect!"]})]})}function d(n={}){const{wrapper:s}={...(0,t.R)(),...n.components};return s?(0,r.jsx)(s,{...n,children:(0,r.jsx)(h,{...n})}):h(n)}},8453:(n,s,e)=>{e.d(s,{R:()=>o,x:()=>l});var i=e(6540);const r={},t=i.createContext(r);function o(n){const s=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(s):{...s,...n}}),[s,n])}function l(n){let s;return s=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:o(n.components),i.createElement(t.Provider,{value:s},n.children)}}}]);