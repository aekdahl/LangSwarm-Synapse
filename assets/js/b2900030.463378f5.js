"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[653],{1770:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Chains/routing-chain","title":"RoutingChain","description":"---","source":"@site/docs/Chains/routing-chain.md","sourceDirName":"Chains","slug":"/Chains/routing-chain","permalink":"/LangSwarm/Chains/routing-chain","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":33,"frontMatter":{"title":"RoutingChain","sidebar_position":33},"sidebar":"defaultSidebar","previous":{"title":"ConsensusChain","permalink":"/LangSwarm/Chains/consensus-chain"},"next":{"title":"VotingChain","permalink":"/LangSwarm/Chains/voting-chain"}}');var t=i(4848),r=i(8453);const o={title:"RoutingChain",sidebar_position:33},l="RoutingChain",a={},c=[{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Purpose</strong>",id:"purpose",level:2},{value:"<strong>Class Definition</strong>",id:"class-definition",level:2},{value:"<strong>Key Components</strong>",id:"key-components",level:2},{value:"<strong>Usage</strong>",id:"usage",level:2},{value:"<strong>Customization</strong>",id:"customization",level:2},{value:"<strong>Use Cases</strong>",id:"use-cases",level:2},{value:"<strong>Comparison with Other Chains</strong>",id:"comparison-with-other-chains",level:2}];function h(n){const e={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.header,{children:(0,t.jsx)(e.h1,{id:"routingchain",children:"RoutingChain"})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"overview",children:(0,t.jsx)(e.strong,{children:"Overview"})}),"\n",(0,t.jsxs)(e.p,{children:["The ",(0,t.jsx)(e.code,{children:"RoutingChain"})," class is a custom, LangChain-compatible chain designed to dynamically route tasks to the most appropriate agents or workflows based on predefined routing logic. It leverages the ",(0,t.jsx)(e.code,{children:"LLMRouting"})," class to manage task distribution, enabling efficient handling of diverse queries within a LangChain pipeline."]}),"\n",(0,t.jsx)(e.p,{children:"This chain is particularly useful for workflows that require decisions about which agent or workflow is best suited to process a given task."}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"purpose",children:(0,t.jsx)(e.strong,{children:"Purpose"})}),"\n",(0,t.jsxs)(e.p,{children:["The primary purpose of the ",(0,t.jsx)(e.code,{children:"RoutingChain"})," class is:"]}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Dynamic Task Routing"}),": To intelligently route queries or tasks to the appropriate agents or workflows."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Pipeline Integration"}),": To act as a reusable chain within LangChain workflows, facilitating seamless interaction with other tools or agents."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Customization"}),": To allow flexibility in defining routing logic and configuring the chain for specific use cases."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"class-definition",children:(0,t.jsx)(e.strong,{children:"Class Definition"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'class RoutingChain(Chain):\n    def __init__(self, route, bots, main_bot, **kwargs):\n        """\n        Initializes the RoutingChain.\n\n        Parameters:\n        - route (int): The routing logic to apply.\n        - bots (dict): Dictionary of bots to route tasks.\n        - main_bot: The primary bot for routing decisions.\n        - kwargs: Additional parameters for the LLMRouting class.\n        """\n        self.routing = LLMRouting(route=route, bots=bots, main_bot=main_bot, **kwargs)\n\n    @property\n    def input_keys(self):\n        """Define input keys for the chain."""\n        return ["query"]\n\n    @property\n    def output_keys(self):\n        """Define output keys for the chain."""\n        return ["routed_result"]\n\n    def _call(self, inputs):\n        """\n        Processes the input query and returns the routed result.\n\n        Parameters:\n        - inputs (dict): Dictionary containing the query.\n\n        Returns:\n        - dict: Dictionary containing the routed result.\n        """\n        query = inputs["query"]\n        self.routing.query = query\n        result = self.routing.run()\n        return {"routed_result": result}\n'})}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"key-components",children:(0,t.jsx)(e.strong,{children:"Key Components"})}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.strong,{children:[(0,t.jsx)(e.code,{children:"__init__"})," Method"]})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Initializes the chain with routing logic, a dictionary of bots, and a primary bot for decision-making."}),"\n",(0,t.jsxs)(e.li,{children:["Parameters:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"route"}),": Integer defining the routing logic to use."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"bots"}),": A dictionary mapping bot identifiers to their respective instances."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"main_bot"}),": The primary bot responsible for making routing decisions."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"kwargs"}),": Optional parameters passed to configure the ",(0,t.jsx)(e.code,{children:"LLMRouting"})," class."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.strong,{children:[(0,t.jsx)(e.code,{children:"input_keys"})," Property"]})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Specifies the input keys required by the chain."}),"\n",(0,t.jsxs)(e.li,{children:["Inputs:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"query"}),": The user query to be routed to an appropriate agent or workflow."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.strong,{children:[(0,t.jsx)(e.code,{children:"output_keys"})," Property"]})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Specifies the output keys returned by the chain."}),"\n",(0,t.jsxs)(e.li,{children:["Outputs:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.code,{children:"routed_result"}),": The result of the routed task."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsxs)(e.strong,{children:[(0,t.jsx)(e.code,{children:"_call"})," Method"]})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Core logic for executing the chain."}),"\n",(0,t.jsxs)(e.li,{children:["Workflow:","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Accepts a ",(0,t.jsx)(e.code,{children:"query"})," input."]}),"\n",(0,t.jsxs)(e.li,{children:["Assigns the ",(0,t.jsx)(e.code,{children:"query"})," to the ",(0,t.jsx)(e.code,{children:"LLMRouting"})," instance."]}),"\n",(0,t.jsxs)(e.li,{children:["Calls the ",(0,t.jsx)(e.code,{children:"run"})," method of ",(0,t.jsx)(e.code,{children:"LLMRouting"})," to route the query and obtain the result."]}),"\n",(0,t.jsx)(e.li,{children:"Returns the routed result as a dictionary."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"usage",children:(0,t.jsx)(e.strong,{children:"Usage"})}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Initialization"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'from langswarm.swarm.routing import LLMRouting\nfrom mymodule import RoutingChain\n\n# Define bots and routing logic\nbots = {\n    "bot1": agent1,\n    "bot2": agent2,\n    "bot3": agent3,\n}\nmain_bot = central_decision_maker\n\n# Initialize the RoutingChain\nchain = RoutingChain(route=1, bots=bots, main_bot=main_bot, param1=value1)\n'})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Execution"})}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:'# Input data\ninputs = {\n    "query": "What is the weather forecast for tomorrow in New York?",\n}\n\n# Get the routed result\nresult = chain(inputs)\nprint("Routed Result:", result["routed_result"])\n'})}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:["\n",(0,t.jsx)(e.p,{children:(0,t.jsx)(e.strong,{children:"Integration with LangChain Pipelines"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["The ",(0,t.jsx)(e.code,{children:"RoutingChain"})," can be integrated into LangChain workflows as a standalone chain or in combination with other chains and tools."]}),"\n"]}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-python",children:"from langchain.chains import SequentialChain\n\n# Example pipeline\npipeline = SequentialChain(chains=[chain, another_chain])\npipeline.run(inputs)\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"customization",children:(0,t.jsx)(e.strong,{children:"Customization"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Custom Routing Logic"}),": Modify the ",(0,t.jsx)(e.code,{children:"route"})," parameter or extend the ",(0,t.jsx)(e.code,{children:"LLMRouting"})," class to define more sophisticated routing strategies."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Dynamic Bots"}),": Update the ",(0,t.jsx)(e.code,{children:"bots"})," dictionary dynamically to add or remove agents based on task requirements."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Extending the Chain"}),": Subclass ",(0,t.jsx)(e.code,{children:"RoutingChain"})," to customize the ",(0,t.jsx)(e.code,{children:"_call"})," method or introduce additional input and output keys."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"use-cases",children:(0,t.jsx)(e.strong,{children:"Use Cases"})}),"\n",(0,t.jsxs)(e.ol,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Task Specialization"}),":","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Route queries to agents specialized in different domains (e.g., weather, finance, or healthcare)."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Workflow Optimization"}),":","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Dynamically assign tasks to agents based on workload or performance metrics."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Context-Aware Decisions"}),":","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:["Use the primary bot (",(0,t.jsx)(e.code,{children:"main_bot"}),") to analyze the context and make routing decisions."]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"Load Balancing"}),":","\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsx)(e.li,{children:"Distribute tasks across multiple agents to ensure even workload distribution."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsx)(e.h2,{id:"comparison-with-other-chains",children:(0,t.jsx)(e.strong,{children:"Comparison with Other Chains"})}),"\n",(0,t.jsxs)(e.ul,{children:["\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"RoutingChain"}),": Dynamically routes queries to specific agents or workflows based on predefined logic."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"VotingChain"}),": Aggregates multiple responses and determines the result based on a voting mechanism."]}),"\n",(0,t.jsxs)(e.li,{children:[(0,t.jsx)(e.strong,{children:"BranchingChain"}),": Generates multiple diverse responses without routing queries to specific agents."]}),"\n"]}),"\n",(0,t.jsx)(e.hr,{}),"\n",(0,t.jsxs)(e.p,{children:["This documentation provides a detailed explanation of the ",(0,t.jsx)(e.code,{children:"RoutingChain"})," class, including its purpose, structure, and usage. Let me know if you\u2019d like further clarifications or refinements!"]})]})}function d(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,t.jsx)(e,{...n,children:(0,t.jsx)(h,{...n})}):h(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>l});var s=i(6540);const t={},r=s.createContext(t);function o(n){const e=s.useContext(r);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function l(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),s.createElement(r.Provider,{value:e},n.children)}}}]);