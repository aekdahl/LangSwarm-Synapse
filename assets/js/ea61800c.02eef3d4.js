"use strict";(self.webpackChunkdocusaurus_docs=self.webpackChunkdocusaurus_docs||[]).push([[797],{9806:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>p});const t=JSON.parse('{"id":"Tutorials/routing","title":"Routing with a LangChain","description":"This tutorial demonstrates how to use LangSwarm\'s LLMRouting within a LangChain pipeline. LangSwarm\'s routing capabilities allow dynamic selection of workflows (e.g., branching, voting, consensus) based on the query or other conditions, enabling flexible and scalable AI solutions.","source":"@site/docs/Tutorials/routing.md","sourceDirName":"Tutorials","slug":"/Tutorials/routing","permalink":"/LangSwarm/Tutorials/routing","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":103,"frontMatter":{"title":"Routing with a LangChain","sidebar_position":103},"sidebar":"defaultSidebar","previous":{"title":"Consensus with LangChain","permalink":"/LangSwarm/Tutorials/consensus"},"next":{"title":"Voting with a LangChain","permalink":"/LangSwarm/Tutorials/voting"}}');var s=i(4848),r=i(8453);const o={title:"Routing with a LangChain",sidebar_position:103},a="Routing with a LangChain",l={},p=[{value:"<strong>Prerequisites</strong>",id:"prerequisites",level:2},{value:"<strong>Overview</strong>",id:"overview",level:2},{value:"<strong>Full Code</strong>",id:"full-code",level:2},{value:"<strong>Code Walkthrough</strong>",id:"code-walkthrough",level:2},{value:"<strong>Step 1: Pre-processing Chain</strong>",id:"step-1-pre-processing-chain",level:3},{value:"<strong>Step 2: Routing Swarm</strong>",id:"step-2-routing-swarm",level:3},{value:"<strong>Step 3: Post-processing Chain</strong>",id:"step-3-post-processing-chain",level:3},{value:"<strong>Step 4: Build and Run the Pipeline</strong>",id:"step-4-build-and-run-the-pipeline",level:3},{value:"<strong>Expected Output</strong>",id:"expected-output",level:2},{value:"<strong>Why This is Powerful</strong>",id:"why-this-is-powerful",level:2}];function u(n){const e={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"routing-with-a-langchain",children:"Routing with a LangChain"})}),"\n",(0,s.jsxs)(e.p,{children:["This tutorial demonstrates how to use ",(0,s.jsx)(e.strong,{children:"LangSwarm's LLMRouting"})," within a LangChain pipeline. LangSwarm's routing capabilities allow dynamic selection of workflows (e.g., branching, voting, consensus) based on the query or other conditions, enabling flexible and scalable AI solutions."]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"prerequisites",children:(0,s.jsx)(e.strong,{children:"Prerequisites"})}),"\n",(0,s.jsx)(e.p,{children:"Ensure you have the necessary libraries installed:"}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-bash",children:"pip install langswarm langchain langchain-openai transformers\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"overview",children:(0,s.jsx)(e.strong,{children:"Overview"})}),"\n",(0,s.jsx)(e.p,{children:"We will:"}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["Use LangChain\u2019s ",(0,s.jsx)(e.code,{children:"LLMChain"})," for pre-processing input."]}),"\n",(0,s.jsxs)(e.li,{children:["Utilize LangSwarm\u2019s ",(0,s.jsx)(e.code,{children:"LLMRouting"})," to dynamically select a workflow (e.g., voting, branching)."]}),"\n",(0,s.jsx)(e.li,{children:"Integrate a post-processing step with LangChain to refine the selected response."}),"\n",(0,s.jsxs)(e.li,{children:["Combine all steps into a LangChain ",(0,s.jsx)(e.code,{children:"SequentialChain"})," pipeline for a unified workflow."]}),"\n"]}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"full-code",children:(0,s.jsx)(e.strong,{children:"Full Code"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'"""\nLangSwarm + LangChain Pipeline Tutorial: Routing Swarm\n\nThis tutorial demonstrates how to use LangSwarm\'s LangChain-compatible tools\nto include `LLMRouting` directly in a LangChain pipeline with pre- and post-processing steps.\n\nKey Features:\n- Use LangSwarm\u2019s dynamic routing capabilities.\n- Route queries to different workflows (e.g., voting, branching, consensus).\n- Pre-processing and post-processing steps in the pipeline.\n"""\n\n# Import necessary libraries\nfrom langswarm.swarm import LLMRouting  # LangSwarm\'s dynamic routing tool\nfrom langchain.prompts import PromptTemplate  # LangChain prompt templates\nfrom langchain.chains import SequentialChain, LLMChain  # LangChain pipeline framework\nfrom langchain.llms import OpenAI  # LangChain OpenAI LLM\n\n# Step 1: Pre-processing Chain\n"""\nThe pre-processing chain ensures the input is clean and formatted before routing.\n"""\npre_prompt = PromptTemplate(\n    input_variables=["raw_input"],\n    template="Clean and standardize the following input for processing:\\n\\n{raw_input}"\n)\npre_chain = LLMChain(llm=OpenAI(model="gpt-3.5-turbo"), prompt=pre_prompt)\n\n# Step 2: Routing Swarm\n"""\nUse LangSwarm\'s LLMRouting to dynamically select a workflow based on the query.\n"""\nclass RoutingChain:\n    """\n    A LangChain-compatible wrapper for LangSwarm\'s LLMRouting.\n    """\n\n    def __init__(self, query, route, agents):\n        self.routing_swarm = LLMRouting(route=route, bots=agents, main_bot=agents[0], query=query)\n\n    def run(self, query):\n        return self.routing_swarm.run()\n\n# Define agents for routing\nagents = [\n    {"model": "gpt-4", "api_key": "your_openai_api_key"},\n    {"model": "gpt-3.5-turbo", "api_key": "your_openai_api_key"},\n    {"model": "gpt-3.5-turbo-instruct", "api_key": "your_openai_api_key"},\n]\n\n# Example: Route 1 (Branching) and Route 2 (Voting)\nrouting_chain = RoutingChain(query="What are the benefits of AI in education?", route=1, agents=agents)\n\n# Step 3: Post-processing Chain\n"""\nThe post-processing chain refines the routed response and generates actionable insights.\n"""\npost_prompt = PromptTemplate(\n    input_variables=["routed_response"],\n    template=(\n        "Based on the routed response:\\n\\n"\n        "{routed_response}\\n\\n"\n        "Provide three actionable recommendations."\n    )\n)\npost_chain = LLMChain(llm=OpenAI(model="gpt-3.5-turbo"), prompt=post_prompt)\n\n# Step 4: Build the LangChain Pipeline\n"""\nCombine the pre-processing, routing, and post-processing steps into a LangChain pipeline.\n"""\npipeline = SequentialChain(\n    chains=[pre_chain, routing_chain, post_chain],\n    input_variables=["raw_input"],\n    output_variables=["routed_response", "recommendations"],\n)\n\n# Step 5: Run the Pipeline\n"""\nRun the pipeline on a query, demonstrating the complete multi-agent workflow.\n"""\nquery = "What are the benefits of AI in education?"\nresults = pipeline.run({"raw_input": query})\n\n# Display the results\nprint("\\nRouted Response:", results["routed_response"])\nprint("\\nRecommendations:", results["recommendations"])\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"code-walkthrough",children:(0,s.jsx)(e.strong,{children:"Code Walkthrough"})}),"\n",(0,s.jsx)(e.h3,{id:"step-1-pre-processing-chain",children:(0,s.jsx)(e.strong,{children:"Step 1: Pre-processing Chain"})}),"\n",(0,s.jsx)(e.p,{children:"The pre-processing chain formats the input query to ensure it is standardized before being routed to the appropriate workflow."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'pre_prompt = PromptTemplate(\n    input_variables=["raw_input"],\n    template="Clean and standardize the following input for processing:\\n\\n{raw_input}"\n)\npre_chain = LLMChain(llm=OpenAI(model="gpt-3.5-turbo"), prompt=pre_prompt)\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"step-2-routing-swarm",children:(0,s.jsx)(e.strong,{children:"Step 2: Routing Swarm"})}),"\n",(0,s.jsxs)(e.p,{children:["LangSwarm\u2019s ",(0,s.jsx)(e.code,{children:"LLMRouting"})," dynamically selects the workflow (e.g., branching or voting) based on the query and the specified route."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'class RoutingChain:\n    """\n    A LangChain-compatible wrapper for LangSwarm\'s LLMRouting.\n    """\n\n    def __init__(self, query, route, agents):\n        self.routing_swarm = LLMRouting(route=route, bots=agents, main_bot=agents[0], query=query)\n\n    def run(self, query):\n        return self.routing_swarm.run()\n\n# Define agents for routing\nagents = [\n    {"model": "gpt-4", "api_key": "your_openai_api_key"},\n    {"model": "gpt-3.5-turbo", "api_key": "your_openai_api_key"},\n    {"model": "gpt-3.5-turbo-instruct", "api_key": "your_openai_api_key"},\n]\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"step-3-post-processing-chain",children:(0,s.jsx)(e.strong,{children:"Step 3: Post-processing Chain"})}),"\n",(0,s.jsx)(e.p,{children:"The post-processing chain refines the routed response and provides actionable insights based on the output."}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'post_prompt = PromptTemplate(\n    input_variables=["routed_response"],\n    template=(\n        "Based on the routed response:\\n\\n"\n        "{routed_response}\\n\\n"\n        "Provide three actionable recommendations."\n    )\n)\npost_chain = LLMChain(llm=OpenAI(model="gpt-3.5-turbo"), prompt=post_prompt)\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h3,{id:"step-4-build-and-run-the-pipeline",children:(0,s.jsx)(e.strong,{children:"Step 4: Build and Run the Pipeline"})}),"\n",(0,s.jsxs)(e.p,{children:["The ",(0,s.jsx)(e.code,{children:"SequentialChain"})," combines all steps into a single LangChain pipeline, enabling a complete workflow that integrates routing and post-processing."]}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-python",children:'pipeline = SequentialChain(\n    chains=[pre_chain, routing_chain, post_chain],\n    input_variables=["raw_input"],\n    output_variables=["routed_response", "recommendations"],\n)\n\nquery = "What are the benefits of AI in education?"\nresults = pipeline.run({"raw_input": query})\n\nprint("\\nRouted Response:", results["routed_response"])\nprint("\\nRecommendations:", results["recommendations"])\n'})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"expected-output",children:(0,s.jsx)(e.strong,{children:"Expected Output"})}),"\n",(0,s.jsx)(e.pre,{children:(0,s.jsx)(e.code,{className:"language-plaintext",children:"Routed Response:\nAI in education improves personalized learning, enhances accessibility, and provides data-driven insights for educators.\n\nRecommendations:\n1. Implement AI-powered personalized learning platforms.\n2. Use AI to create accessible educational resources for diverse learners.\n3. Leverage AI analytics to support data-driven decision-making in schools.\n"})}),"\n",(0,s.jsx)(e.hr,{}),"\n",(0,s.jsx)(e.h2,{id:"why-this-is-powerful",children:(0,s.jsx)(e.strong,{children:"Why This is Powerful"})}),"\n",(0,s.jsxs)(e.ol,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Dynamic Workflow Selection"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Routes queries to appropriate workflows, ensuring optimal processing for different use cases."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Seamless Integration"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Combines LangSwarm\u2019s routing capabilities with LangChain for downstream workflows."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"Scalability"}),":"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsx)(e.li,{children:"Easily extend routing logic to include additional workflows (e.g., consensus, aggregation)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.p,{children:["With LangSwarm\u2019s ",(0,s.jsx)(e.code,{children:"LLMRouting"}),", you can build dynamic pipelines that adapt to diverse AI workflows, combining the best of LangSwarm and LangChain."]})]})}function h(n={}){const{wrapper:e}={...(0,r.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(u,{...n})}):u(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>a});var t=i(6540);const s={},r=t.createContext(s);function o(n){const e=t.useContext(r);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function a(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:o(n.components),t.createElement(r.Provider,{value:e},n.children)}}}]);